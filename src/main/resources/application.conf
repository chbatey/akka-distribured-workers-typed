akka {
  actor {
    # Must be set like this to use Akka Cluster
    provider = cluster

    serialization-bindings {
      "worker.CborSerializable" = jackson-cbor
    }
  }

 loglevel = DEBUG

  # For the sample, just bind to loopback and do not allow access from the network
  remote.artery.canonical.hostname=127.0.0.1
  # the port is overridden by the logic in Main.scala
  remote.artery.canonical.port=0

  cluster {
    # Seed nodes are a way to have a node join the cluster (or form a new cluster) from configuration.
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552"]

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 10s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s

  # If a workload hasn't finished in this long it
  # is considered failed and is retried
  work-timeout = 10s

  # Timeout for worker waiting for ack from master
  work-ack-timeout = 5s
}